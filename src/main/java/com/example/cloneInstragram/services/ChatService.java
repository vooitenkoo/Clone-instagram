package com.example.cloneInstragram.services;

import com.example.cloneInstragram.dto.MessageDTO;
import com.example.cloneInstragram.dto.UserDTO;
import com.example.cloneInstragram.entity.Chat;
import com.example.cloneInstragram.entity.Message;
import com.example.cloneInstragram.entity.User;
import com.example.cloneInstragram.repos.ChatRepo;
import com.example.cloneInstragram.repos.MessageRepo;
import com.example.cloneInstragram.repos.UserRepo;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class ChatService {
    private final ChatRepo chatRepository;
    private final MessageRepo messageRepository;
    private final UserRepo userRepo;
    private final UserService userService;

    public ChatService(ChatRepo chatRepository, MessageRepo messageRepository, UserRepo userRepo, UserService userService) {
        this.chatRepository = chatRepository;
        this.messageRepository = messageRepository;
        this.userRepo = userRepo;
        this.userService = userService;
    }

    // üìå –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ
    @Transactional
    public List<User> getUsersInChat(Long chatId) {
        return chatRepository.findById(chatId)
                .map(Chat::getUsers)  // –ë–µ—Ä—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
                .map(List::copyOf)    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ List<User>
                .orElseThrow(() -> new RuntimeException("Chat not found"));
    }


    // üìå –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
    public Message saveMessage(Long chatId, User sender, String content) {
        Chat chat = chatRepository.findById(chatId)
                .orElseThrow(() -> new IllegalArgumentException("Chat not found"));

        Message message = new Message();
        message.setSender(sender);
        message.setContent(content);
        message.setChat(chat);
        message.setSentAt(LocalDateTime.now());

        return messageRepository.save(message);
    }


    // üìå –ü–æ–¥—Å—á–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ
    public long countNewMessages(Long senderId, Long recipientId) {
        return messageRepository.countBySenderIdAndChatId(senderId, recipientId);
    }

    // üìå –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
    public List<MessageDTO> findChatMessages(Long senderId, Long recipientId) {
        Optional<Chat> chat = chatRepository.findChatBetweenUsers(senderId, recipientId);

        if (chat.isEmpty()) {
            return List.of(); // –ï—Å–ª–∏ —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        }

        List<Message> messages = messageRepository.findByChatId(
                chat.get().getId(),
                Sort.by(Sort.Direction.ASC, "sentAt")
        );

        return messages.stream().map(msg -> new MessageDTO(
                msg.getId(),
                userService.getUserDTO(msg.getSender(), msg.getSender()), // –°–æ–∑–¥–∞—ë–º DTO –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                msg.getContent(),
                msg.getSentAt()
        )).collect(Collectors.toList());
    }

    // üìå –ù–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ ID
    public Message findById(Long id) {
        return messageRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Message not found"));
    }
}
